{
  "_args": [
    [
      {
        "raw": "redux-persist@^3.2.2",
        "scope": null,
        "escapedName": "redux-persist",
        "name": "redux-persist",
        "rawSpec": "^3.2.2",
        "spec": ">=3.2.2 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Pulego-PC\\Documents\\FlatApp"
    ]
  ],
  "_from": "redux-persist@>=3.2.2 <4.0.0",
  "_id": "redux-persist@3.5.0",
  "_inCache": true,
  "_location": "/redux-persist",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/redux-persist-3.5.0.tgz_1471566687420_0.5102328371722251"
  },
  "_npmUser": {
    "name": "rt2zz",
    "email": "ztstory@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-persist@^3.2.2",
    "scope": null,
    "escapedName": "redux-persist",
    "name": "redux-persist",
    "rawSpec": "^3.2.2",
    "spec": ">=3.2.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-persist/-/redux-persist-3.5.0.tgz",
  "_shasum": "84bd74c2b17e32d490aea71196a812f2013fcc8e",
  "_shrinkwrap": null,
  "_spec": "redux-persist@^3.2.2",
  "_where": "C:\\Users\\Pulego-PC\\Documents\\FlatApp",
  "author": {
    "name": "rt2zz",
    "email": "zack@root-two.com"
  },
  "ava": {
    "require": [
      "babel-register"
    ],
    "babel": "inherit"
  },
  "bugs": {
    "url": "https://github.com/rt2zz/redux-persist/issues"
  },
  "dependencies": {
    "json-stringify-safe": "^5.0.1",
    "lodash": "^4.11.1"
  },
  "description": "persist and rehydrate redux stores",
  "devDependencies": {
    "ava": "^0.14.0",
    "babel-cli": "^6.6.5",
    "babel-eslint": "^6.0.0",
    "babel-plugin-lodash": "^2.3.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-2": "^6.5.0",
    "babel-register": "^6.7.2",
    "immutable": "^3.7.6",
    "redux": "~3.3.1",
    "rimraf": "~2.5.2",
    "standard": "^6.0.8"
  },
  "directories": {},
  "dist": {
    "shasum": "84bd74c2b17e32d490aea71196a812f2013fcc8e",
    "tarball": "https://registry.npmjs.org/redux-persist/-/redux-persist-3.5.0.tgz"
  },
  "files": [
    "lib",
    "src",
    "constants.js"
  ],
  "gitHead": "474dbc5cf538976e9240faea4afe6f3cb1133f18",
  "homepage": "https://github.com/rt2zz/redux-persist",
  "keywords": [
    "redux",
    "redux-middleware",
    "localstorage",
    "redux-persist",
    "redux-storage",
    "redux-rehydrate"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "rt2zz",
      "email": "zstory@ucla.edu"
    }
  ],
  "name": "redux-persist",
  "optionalDependencies": {},
  "readme": "# Redux Persist\nPersist and rehydrate a redux store.\n\nRedux Persist is [performant](#why-redux-persist), easy to [implement](#basic-usage), and easy to [extend](#transforms).\n\n**[V3 changelog](https://github.com/rt2zz/redux-persist/releases/tag/v3.0.0)**\nThese docs are for redux-persist v3. This version removes the automatic action buffer, if you relied on this functionality you can now [implement it explicitly](#action-buffer).\n\n**[Migrations](https://github.com/wildlifela/redux-persist-migrate)**\nare hot off the presses, feedback welcome!\n\n`npm i --save redux-persist`\n\n[![build status](https://img.shields.io/travis/rt2zz/redux-persist/master.svg?style=flat-square)](https://travis-ci.org/rt2zz/redux-persist)\n[![npm version](https://img.shields.io/npm/v/redux-persist.svg?style=flat-square)](https://www.npmjs.com/package/redux-persist)\n[![npm downloads](https://img.shields.io/npm/dm/redux-persist.svg?style=flat-square)](https://www.npmjs.com/package/redux-persist)\n\n## Basic Usage\nBasic usage requires adding three lines to a traditional redux application:\n```js\nimport {persistStore, autoRehydrate} from 'redux-persist'\nconst store = createStore(reducer, undefined, autoRehydrate())\npersistStore(store)\n```\nFor per reducer rehydration logic, you can opt-in by adding a handler to your reducer:\n```js\nimport {REHYDRATE} from 'redux-persist/constants'\n//...\ncase REHYDRATE:\n  var incoming = action.payload.myReducer\n  if (incoming) return {...state, ...incoming, specialKey: processSpecial(incoming.specialKey)}\n  return state\n```\nYou may also need to configure the persistence layer, or take action after rehydration has completed:\n```js\npersistStore(store, {blacklist: ['someTransientReducer']}, () => {\n  console.log('rehydration complete')\n})\n```\nAnd if things get out of wack, just purge the storage\n```js\npersistStore(store, config, callback).purge(['someReducer']) //or .purgeAll()\n```\n\n## API\n#### `persistStore(store, [config, callback])`\n  - arguments\n    - **store** *redux store* The store to be persisted.\n    - **config** *object*\n      - **blacklist** *array* keys (read: reducers) to ignore\n      - **whitelist** *array* keys (read: reducers) to persist, if set all other keys will be ignored.\n      - **storage** *object* a [conforming](https://github.com/rt2zz/redux-persist#storage-backends) storage engine.\n      - **transforms** *array* transforms to be applied during storage and during rehydration.\n      - **debounce** *integer* debounce interval applied to storage calls.\n    - **callback** *function* will be called after rehydration is finished.\n  - returns **persistor** object\n\n#### `persistor object`\n  - the persistor object is returned by persistStore with the following methods:\n    - `.purge(keys)`\n      - **keys** *array* An array of keys to be purged from storage. If not provided all keys will be purged.\n    - `.rehydrate(incoming, options)`\n      - **incoming** *object* Data to be rehydrated into the store.\n      - **options** *object* If `serial:true`, incoming should be a *string*, that will be deserialized and passed through the transforms defined in the persistor.\n      - Manually rehydrates the store with the passed data, dispatching the rehydrate action.\n\n#### `autoRehydrate()`\n  - This is a store enhancer that will automatically shallow merge the persisted state for each key. Additionally it queues any actions that are dispatched before rehydration is complete, and fires them after rehydration is finished.\n\n#### `constants`\n  - `import * as constants from 'redux-persist/constants'`. This includes rehydration action types, and other relevant constants.\n\n## Alternate Usage\n#### getStoredState / createPersistor\n```js\nimport {getStoredState, autoRehydrate, createPersistor} from 'redux-persist'\n\n// ...\n\nconst persistConfig = { /* ... */ }\n\ngetStoredState(persistConfig, (err, restoredState) => {\n  const store = createStore(reducer, restoredState)\n  const persistor = createPersistor(store, persistConfig)\n})\n```\n**Notes:**  \n* under the hood, `persistStore` simply implements both `getStoredState` and `createPersistor`\n* getStoredState supports promises as well\n\n#### Secondary Persistor\n```js\nimport {persistStore, createPersistor} from 'redux-persist'\nconst persistor = persistStore(store) // persistStore restores and persists\nconst secondaryPersistor = createPersistor(store, {storage: specialBackupStorage}) // createPersistor only persists\n```\n\n## Storage Backends\n- **localStorage** (default) web\n- **sessionStorage** \n- **[localForage](https://github.com/mozilla/localForage)** (recommended) web, see usage below\n- **[AsyncStorage](http://facebook.github.io/react-native/docs/asyncstorage.html#content)** for react-native\n- **[redux-persist-node-storage](https://github.com/pellejacobs/redux-persist-node-storage)** for use in nodejs environments.\n- **custom** any conforming storage api implementing the following methods: `setItem` `getItem` `removeItem` `getAllKeys`. [[example](https://github.com/facebook/react-native/blob/master/Libraries/Storage/AsyncStorage.js)]\n\n```js\n// sessionStorage\nimport { persistStore, storages } from 'redux-persist'\npersistStore(store, {storage: storages.asyncSessionStorage})\n\n// react-native\nimport {AsyncStorage} from 'react-native'\npersistStore(store, {storage: AsyncStorage})\n\n// web with recommended localForage\nimport localForage from 'localForage'\npersistStore(store, {storage: localForage})\n\n```\n\n## Transforms\nTransforms allow for arbitrary state transforms before saving and during rehydration.\n- [immutable](https://github.com/rt2zz/redux-persist-transform-immutable) - support immutable reducers\n- [compress](https://github.com/rt2zz/redux-persist-transform-compress) - compress your serialized state with lz-string\n- [encrypt](https://github.com/maxdeviant/redux-persist-transform-encrypt) - encrypt your serialized state with AES\n- [filter](https://github.com/edy/redux-persist-transform-filter) - store or load a subset of your state\n- custom transforms:\n```js\nimport { createTransform, persistStore } from 'redux-persist'\n\nlet myTransform = createTransform(\n  (inboundState, key) => specialSerialize(inboundState, key),\n  (outboundState, key) => specialDeserialize(outboundState, key),\n  {whitelist: ['specialReducer']}\n)\n\npersistStore(store, {transforms: [myTransform]})\n```\n\n## Action Buffer\nA common mistake is to fire actions that modify state before rehydration is complete which then will be overwritten by the rehydrate action. You can either defer firing of those actions until rehydration is complete, or you can use an [action buffer](https://github.com/rt2zz/redux-action-buffer/blob/master/README.md#redux-persist-example).\n\nEarlier versions of redux persist included the action buffer by default, but it was removed in v3.\n\n\n## Why Redux Persist\n\n* Performant out of the box (uses a time iterator and operates on state partials)\n* Keeps custom rehydration logic in the reducers (where it intuitively belongs)\n* Supports localStorage, react-native AsyncStorage, or any conforming storage api\n\nBecause persisting state is inherently stateful, `persistStore` lives outside of the redux store. Importantly this keeps the store 'pure' and makes testing and extending the persistor much easier.\n\n## About Auto Rehydrate\nautoRehydrate is a store enhancer that automatically rehydrates state.\n\nWhile auto rehydration works out of the box, individual reducers can opt in to handling their own rehydration, allowing for more complex operations like data transforms and cache invalidation. Simply define a handler for the rehydrate action in your reducer, and if the state is mutated, auto rehydrate will skip that key.\n\nAuto rehydrate is provided as a convenience. In a large application, or one with atypical reducer composition, auto rehydration may not be convenient. In this case, simply omit autoRehydrate. Rehydration actions will still be fired by `persistStore`, and can then be handled individually by reducers or using a custom rehydration handler.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rt2zz/redux-persist.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "build:watch": "npm run build ./src -- -watch",
    "clean": "rimraf lib dist",
    "prepublish": "npm run clean && npm run build",
    "test": "standard && ava",
    "test:watch": "npm test -- --watch"
  },
  "standard": {
    "parser": "babel-eslint"
  },
  "version": "3.5.0"
}
